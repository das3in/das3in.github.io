[["Map",1,2,9,10],"meta::meta",["Map",3,4,5,6,7,8],"astro-version","5.8.0","astro-config-digest","{\"root\":{},\"srcDir\":{},\"publicDir\":{},\"outDir\":{},\"cacheDir\":{},\"compressHTML\":true,\"base\":\"/\",\"trailingSlash\":\"ignore\",\"output\":\"static\",\"scopedStyleStrategy\":\"attribute\",\"build\":{\"format\":\"directory\",\"client\":{},\"server\":{},\"assets\":\"_astro\",\"serverEntry\":\"entry.mjs\",\"redirects\":true,\"inlineStylesheets\":\"auto\",\"concurrency\":1},\"server\":{\"open\":false,\"host\":false,\"port\":4321,\"streaming\":true,\"allowedHosts\":[]},\"redirects\":{},\"image\":{\"endpoint\":{\"route\":\"/_image\"},\"service\":{\"entrypoint\":\"astro/assets/services/sharp\",\"config\":{}},\"domains\":[],\"remotePatterns\":[]},\"devToolbar\":{\"enabled\":true},\"markdown\":{\"syntaxHighlight\":{\"type\":\"shiki\",\"excludeLangs\":[\"math\"]},\"shikiConfig\":{\"langs\":[],\"langAlias\":{},\"theme\":\"github-dark\",\"themes\":{},\"wrap\":false,\"transformers\":[]},\"remarkPlugins\":[],\"rehypePlugins\":[],\"remarkRehype\":{},\"gfm\":true,\"smartypants\":true},\"security\":{\"checkOrigin\":true},\"env\":{\"schema\":{},\"validateSecrets\":false},\"experimental\":{\"clientPrerender\":false,\"contentIntellisense\":false,\"responsiveImages\":false,\"headingIdCompat\":false,\"preserveScriptOrder\":false},\"legacy\":{\"collections\":false}}","content-config-digest","e7b7a3d3e325c4d6","posts",["Map",11,12],"career-debt",{"id":11,"data":13,"body":18,"filePath":19,"digest":20,"rendered":21,"legacyId":30},{"title":14,"description":15,"pubDate":16,"tags":17},"Career Debt: A Hidden Cost of Delivery-Obsessed Engineering Teams","Talking about career debt",["Date","2025-05-30T04:00:00.000Z"],[],"In engineering, we’re used to the idea of technical debt. We accept that\nsometimes we make tradeoffs for the sake of speed or simplicity - knowing we’re\ntaking on some future cost that we’ll need to pay down eventually. Currently,\nwe even bake this into out planning; we carve out 20% of our time for paying\ndown tech debt and I often wonder if this is enough. Still though, there’s some\nacknowledgment that if you never address tech debt it eventually grinds\nprogress to a halt.\n\nBut there’s another kind of debt I’ve been thinking about lately—one that\ndoesn’t show up in code reviews or sprint retros. I’m calling it **career debt**.\n\nCareer debt is what builds up when engineers go too long without doing\nsomething that excites them, challenges them or helps them grow. It’s what\nhappens when work is always safe, repetitive, or product-first with no room for\nexploration or personal development.\n\nJust like technical debt, career debt isn’t immediately catastrophic. In fact,\non paper, everything might look great: features shipped, bugs squashed,\ndeadlines met. But underneath the surface your top engineers are starting to\nfeel stuck. Bored. Maybe even resentful. Eventually, that shows up in ways\nyou can’t ignore: disengagement, low morale, slower iteration and attrition.\n\nI had a recent example of this on my team. We needed to build a temporary event\nqueue to solve a specific business problem. The simplest, most pragmatic answer\nwas to use a Redis based solution — something we’ve used before, something the\nteam is fluent in and something that would’ve gotten us a working solution the\nfastest.\n\nBut two of our strongest engineers had a different idea. They’d been wanting to\nlearn Kafka, and they saw this as a chance to dig in and build something real\nwith it.\n\nNow, let’s be honest: Kafka is not the ideal tool for a simple event queue.\nIt’s complex. It’s operationally heavier. And it likely wasn’t the “right”\ntechnical decision for the problem at hand. But here’s the thing — it wasn’t a\nhigh-stakes, time-sensitive project. We had some breathing room. And more\nimportantly, this was a chance to invest in those engineers.\n\nSo I let them run with it. Build a Proof of Concept. Explore Kafka. Make the\ncase, do the integration, and see where it led.\n\nWas it slower than going with Redis? Yeah. Did they eventually realize that\nKafka wasn’t the right fit for our use case? Absolutely. But the process? It was\nworth every minute. They learned something new. They led the conversation. They\ncame to their own conclusion. And they felt trusted and empowered along the\nway.\n\nThat’s what paying down career debt looks like.\n\nIt’s not about throwing out the roadmap or turning every sprint into a\nhackathon. It’s about recognizing that if you only ever prioritize the\nimmediate product outcome, you risk slowly draining the long-term health of\nyour team.\n\nSo how do you manage career debt? You make space. Space for exploration. Space\nfor growth. Space for engineers to do something for no other reason than that\nthey’re curious or excited about it. That might look like:\n\n* Spikes or POCs for non-roadmap technologies\n\n* “Engineer’s choice” weeks where people pick their own projects\n\n* Rotations across teams or tech stacks\n\n* Internal talks, mentorship, or time to write and share what they’ve learned\n\nThe best teams I’ve seen don’t just manage technical debt, they manage\nmotivation and engagement. They make sure their engineers don’t spend years\nstuck in legacy code or support rotations without a clear path forward. They\nunderstand that career satisfaction is a flywheel for delivery speed, not a\ndistraction from it.\n\nSo next time you’re in a planning meeting, think beyond just story points and\nroadmap goals. Ask yourself: are we also allocating time to pay down career\ndebt? Because if you’re not—sooner or later—you’re going to feel it.","src/content/posts/career-debt.md","faaa0e82d3524876",{"html":22,"metadata":23},"\u003Cp>In engineering, we’re used to the idea of technical debt. We accept that\nsometimes we make tradeoffs for the sake of speed or simplicity - knowing we’re\ntaking on some future cost that we’ll need to pay down eventually. Currently,\nwe even bake this into out planning; we carve out 20% of our time for paying\ndown tech debt and I often wonder if this is enough. Still though, there’s some\nacknowledgment that if you never address tech debt it eventually grinds\nprogress to a halt.\u003C/p>\n\u003Cp>But there’s another kind of debt I’ve been thinking about lately—one that\ndoesn’t show up in code reviews or sprint retros. I’m calling it \u003Cstrong>career debt\u003C/strong>.\u003C/p>\n\u003Cp>Career debt is what builds up when engineers go too long without doing\nsomething that excites them, challenges them or helps them grow. It’s what\nhappens when work is always safe, repetitive, or product-first with no room for\nexploration or personal development.\u003C/p>\n\u003Cp>Just like technical debt, career debt isn’t immediately catastrophic. In fact,\non paper, everything might look great: features shipped, bugs squashed,\ndeadlines met. But underneath the surface your top engineers are starting to\nfeel stuck. Bored. Maybe even resentful. Eventually, that shows up in ways\nyou can’t ignore: disengagement, low morale, slower iteration and attrition.\u003C/p>\n\u003Cp>I had a recent example of this on my team. We needed to build a temporary event\nqueue to solve a specific business problem. The simplest, most pragmatic answer\nwas to use a Redis based solution — something we’ve used before, something the\nteam is fluent in and something that would’ve gotten us a working solution the\nfastest.\u003C/p>\n\u003Cp>But two of our strongest engineers had a different idea. They’d been wanting to\nlearn Kafka, and they saw this as a chance to dig in and build something real\nwith it.\u003C/p>\n\u003Cp>Now, let’s be honest: Kafka is not the ideal tool for a simple event queue.\nIt’s complex. It’s operationally heavier. And it likely wasn’t the “right”\ntechnical decision for the problem at hand. But here’s the thing — it wasn’t a\nhigh-stakes, time-sensitive project. We had some breathing room. And more\nimportantly, this was a chance to invest in those engineers.\u003C/p>\n\u003Cp>So I let them run with it. Build a Proof of Concept. Explore Kafka. Make the\ncase, do the integration, and see where it led.\u003C/p>\n\u003Cp>Was it slower than going with Redis? Yeah. Did they eventually realize that\nKafka wasn’t the right fit for our use case? Absolutely. But the process? It was\nworth every minute. They learned something new. They led the conversation. They\ncame to their own conclusion. And they felt trusted and empowered along the\nway.\u003C/p>\n\u003Cp>That’s what paying down career debt looks like.\u003C/p>\n\u003Cp>It’s not about throwing out the roadmap or turning every sprint into a\nhackathon. It’s about recognizing that if you only ever prioritize the\nimmediate product outcome, you risk slowly draining the long-term health of\nyour team.\u003C/p>\n\u003Cp>So how do you manage career debt? You make space. Space for exploration. Space\nfor growth. Space for engineers to do something for no other reason than that\nthey’re curious or excited about it. That might look like:\u003C/p>\n\u003Cul>\n\u003Cli>\n\u003Cp>Spikes or POCs for non-roadmap technologies\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>“Engineer’s choice” weeks where people pick their own projects\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Rotations across teams or tech stacks\u003C/p>\n\u003C/li>\n\u003Cli>\n\u003Cp>Internal talks, mentorship, or time to write and share what they’ve learned\u003C/p>\n\u003C/li>\n\u003C/ul>\n\u003Cp>The best teams I’ve seen don’t just manage technical debt, they manage\nmotivation and engagement. They make sure their engineers don’t spend years\nstuck in legacy code or support rotations without a clear path forward. They\nunderstand that career satisfaction is a flywheel for delivery speed, not a\ndistraction from it.\u003C/p>\n\u003Cp>So next time you’re in a planning meeting, think beyond just story points and\nroadmap goals. Ask yourself: are we also allocating time to pay down career\ndebt? Because if you’re not—sooner or later—you’re going to feel it.\u003C/p>",{"headings":24,"localImagePaths":25,"remoteImagePaths":26,"frontmatter":27,"imagePaths":29},[],[],[],{"title":14,"description":15,"pubDate":28},"May 30 2025",[],"career-debt.md"]